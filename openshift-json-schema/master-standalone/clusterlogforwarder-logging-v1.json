{
  "description": "ClusterLogForwarder is an API to configure forwarding logs. \n You configure forwarding by specifying a list of `pipelines`, which forward from a set of named inputs to a set of named outputs. \n There are built-in input names for common log categories, and you can define custom inputs to do additional filtering. \n There is a built-in output name for the default openshift log store, but you can define your own outputs with a URL and other connection information to forward logs to other stores or processors, inside or outside the cluster. \n For more details see the documentation on the API fields.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "logging.openshift.io/v1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "ClusterLogForwarder"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    },
    "spec": {
      "description": "ClusterLogForwarderSpec defines the desired state of ClusterLogForwarder",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "inputs": {
          "description": "Inputs are named filters for log messages to be forwarded. \n There are three built-in inputs named `application`, `infrastructure` and `audit`. You don't need to define inputs here if those are sufficient for your needs. See `inputRefs` for more.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "InputSpec defines a selector of log messages.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "name"
            ],
            "properties": {
              "application": {
                "description": "Application, if present, enables `application` logs.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "namespaces": {
                    "description": "Namespaces is a list of namespaces from which to collect application logs. If the list is empty, logs are collected from all namespaces.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "selector": {
                    "description": "Selector selects logs from all pods with matching labels. For testing purpose, MatchLabels is only supported.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": [
                                "array",
                                "null"
                              ],
                              "items": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "audit": {
                "description": "Audit, if present, enables `audit` logs.",
                "type": [
                  "object",
                  "null"
                ]
              },
              "infrastructure": {
                "description": "Infrastructure, if present, enables `infrastructure` logs.",
                "type": [
                  "object",
                  "null"
                ]
              },
              "name": {
                "description": "Name used to refer to the input of a `pipeline`.",
                "type": "string"
              }
            }
          }
        },
        "outputDefaults": {
          "description": "OutputDefaults are used to specify default values for OutputSpec",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "elasticsearch": {
              "description": "Elasticsearch OutputSpec default values \n Values specified here will be used as default values for Elasticsearch Output spec",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "structuredTypeKey": {
                  "description": "StructuredTypeKey specifies the metadata key to be used as name of elasticsearch index It takes precedence over StructuredTypeName",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "structuredTypeName": {
                  "description": "StructuredTypeName specifies the name of elasticsearch schema",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          }
        },
        "outputs": {
          "description": "Outputs are named destinations for log messages. \n There is a built-in output named `default` which forwards to the default openshift log store. You can define outputs to forward to other stores or log processors, inside or outside the cluster.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "Output defines a destination for log messages.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "name",
              "type"
            ],
            "properties": {
              "cloudwatch": {
                "description": "Cloudwatch provides configuration for the output type `cloudwatch`",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "groupBy": {
                    "description": "GroupBy defines the strategy for grouping logstreams",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "logType",
                      "namespaceName",
                      "namespaceUUID"
                    ]
                  },
                  "groupPrefix": {
                    "description": "GroupPrefix Add this prefix to all group names.  Useful to avoid group name clashes if an AWS account is used for multiple clusters and  used verbatim (e.g. \"\" means no prefix)  The default prefix is cluster-name/log-type",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "region": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "elasticsearch": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "structuredTypeKey": {
                    "description": "StructuredTypeKey specifies the metadata key to be used as name of elasticsearch index It takes precedence over StructuredTypeName",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "structuredTypeName": {
                    "description": "StructuredTypeName specifies the name of elasticsearch schema",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "fluentdForward": {
                "type": [
                  "object",
                  "null"
                ]
              },
              "kafka": {
                "description": "Kafka provides optional extra properties for `type: kafka`",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "brokers": {
                    "description": "Brokers specifies the list of brokers to register in addition to the main output URL on initial connect to enhance reliability.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "topic": {
                    "description": "Topic specifies the target topic to send logs to.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "loki": {
                "description": "Loki provides optional extra properties for `type: loki`",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "labelKeys": {
                    "description": "LabelKeys is a list of meta-data field keys to replace the default Loki labels. \n Loki label names must match the regular expression \"[a-zA-Z_:][a-zA-Z0-9_:]*\". Illegal characters in meta-data keys are replaced with \"_\" to form the label name. For example meta-data key \"kubernetes.labels.foo\" becomes Loki label \"kubernetes_labels_foo\". \n If LabelKeys is not set, the default keys are `[log_type, kubernetes.namespace_name, kubernetes.pod_name, kubernetes_host]` These keys are translated to Loki labels by replacing '.' with '_' as: `log_type`, `kubernetes_namespace_name`, `kubernetes_pod_name`, `kubernetes_host` Note that not all logs will include all of these keys: audit logs and infrastructure journal logs do not have namespace or pod name. \n Note: the set of labels should be small, Loki imposes limits on the size and number of labels allowed. See https://grafana.com/docs/loki/latest/configuration/#limits_config for more. You can still query based on any log record field using query filters.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "tenantKey": {
                    "description": "TenantKey is a meta-data key field to use as the TenantID, For example: 'TenantKey: kubernetes.namespace_name` will use the kubernetes namespace as the tenant ID.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "name": {
                "description": "Name used to refer to the output from a `pipeline`.",
                "type": "string"
              },
              "secret": {
                "description": "Secret for authentication. Name of a secret in the same namespace as the cluster logging operator. \n For client authentication, set secret keys `tls.crt` and `tls.key` to the client certificate and private key. \n To use your own certificate authority, set secret key `ca-bundle.crt`. \n Depending on the `type` there may be other secret keys that have meaning.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of a secret in the namespace configured for log forwarder secrets.",
                    "type": "string"
                  }
                }
              },
              "syslog": {
                "description": "Syslog provides optional extra properties for output type `syslog`",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "addLogSource": {
                    "description": "AddLogSource adds log's source information to the log message If the logs are collected from a process; namespace_name, pod_name, container_name is added to the log In addition, it picks the originating process name and id(known as the `pid`) from the record and injects them into the header field.\"",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "appName": {
                    "description": "AppName is APP-NAME part of the syslog-msg header \n AppName needs to be specified if using rfc5424",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "facility": {
                    "description": "Facility to set on outgoing syslog records. \n Facility values are defined in https://tools.ietf.org/html/rfc5424#section-6.2.1. The value can be a decimal integer. Facility keywords are not standardized, this API recognizes at least the following case-insensitive keywords (defined by https://en.wikipedia.org/wiki/Syslog#Facility_Levels): \n     kernel user mail daemon auth syslog lpr news     uucp cron authpriv ftp ntp security console solaris-cron     local0 local1 local2 local3 local4 local5 local6 local7",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "msgID": {
                    "description": "MsgID is MSGID part of the syslog-msg header \n MsgID needs to be specified if using rfc5424",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "payloadKey": {
                    "description": "PayloadKey specifies record field to use as payload.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "procID": {
                    "description": "ProcID is PROCID part of the syslog-msg header \n ProcID needs to be specified if using rfc5424",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "rfc": {
                    "description": "Rfc specifies the rfc to be used for sending syslog \n Rfc values can be one of:  - RFC3164 (https://tools.ietf.org/html/rfc3164)  - RFC5424 (https://tools.ietf.org/html/rfc5424) \n If unspecified, RFC5424 will be assumed.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "RFC3164",
                      "RFC5424"
                    ]
                  },
                  "severity": {
                    "description": "Severity to set on outgoing syslog records. \n Severity values are defined in https://tools.ietf.org/html/rfc5424#section-6.2.1 The value can be a decimal integer or one of these case-insensitive keywords: \n     Emergency Alert Critical Error Warning Notice Informational Debug",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "tag": {
                    "description": "Tag specifies a record field to use as tag.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "trimPrefix": {
                    "description": "TrimPrefix is a prefix to trim from the tag.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "type": {
                "description": "Type of output plugin.",
                "type": "string",
                "enum": [
                  "syslog",
                  "fluentdForward",
                  "elasticsearch",
                  "kafka",
                  "cloudwatch",
                  "loki"
                ]
              },
              "url": {
                "description": "URL to send log records to. \n An absolute URL, with a scheme. Valid schemes depend on `type`. Special schemes `tcp`, `tls`, `udp` and `udps` are used for types that have no scheme of their own. For example, to send syslog records using secure UDP: \n     { type: syslog, url: udps://syslog.example.com:1234 } \n Basic TLS is enabled if the URL scheme requires it (for example 'https' or 'tls'). The 'username@password' part of `url` is ignored. Any additional authentication material is in the `secret`. See the `secret` field for more details.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^$|[a-zA-z]+:\\/\\/.*"
              }
            }
          }
        },
        "pipelines": {
          "description": "Pipelines forward the messages selected by a set of inputs to a set of outputs.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "object",
              "null"
            ],
            "required": [
              "inputRefs",
              "outputRefs"
            ],
            "properties": {
              "inputRefs": {
                "description": "InputRefs lists the names (`input.name`) of inputs to this pipeline. \n The following built-in input names are always available: \n `application` selects all logs from application pods. \n `infrastructure` selects logs from openshift and kubernetes pods and some node logs. \n `audit` selects node logs related to security audits.",
                "type": "array",
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "labels": {
                "description": "Labels lists labels applied to this pipeline",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "name": {
                "description": "Name is optional, but must be unique in the `pipelines` list if provided.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "outputRefs": {
                "description": "OutputRefs lists the names (`output.name`) of outputs from this pipeline. \n The following built-in names are always available: \n 'default' Output to the default log store provided by ClusterLogging.",
                "type": "array",
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "parse": {
                "description": "Parse enables parsing of log entries into structured logs \n Logs are parsed according to parse value, only `json` is supported as of now.",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "json"
                ]
              }
            }
          }
        }
      }
    },
    "status": {
      "description": "ClusterLogForwarder represents the current status of ClusterLogForwarder",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions of the log forwarder.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. \n Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "message": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "reason": {
                "description": "ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "type": "string"
              },
              "type": {
                "description": "ConditionType is the type of the condition and is typically a CamelCased word or short phrase. \n Condition types should indicate state in the \"abnormal-true\" polarity. For example, if the condition indicates when a policy is invalid, the \"is valid\" case is probably the norm, so the condition should be called \"Invalid\".",
                "type": "string"
              }
            }
          }
        },
        "inputs": {
          "description": "Inputs maps input name to condition of the input.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "description": "Conditions is a set of Condition instances.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "description": "Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. \n Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "status",
                "type"
              ],
              "properties": {
                "lastTransitionTime": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "format": "date-time"
                },
                "message": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "reason": {
                  "description": "ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "status": {
                  "type": "string"
                },
                "type": {
                  "description": "ConditionType is the type of the condition and is typically a CamelCased word or short phrase. \n Condition types should indicate state in the \"abnormal-true\" polarity. For example, if the condition indicates when a policy is invalid, the \"is valid\" case is probably the norm, so the condition should be called \"Invalid\".",
                  "type": "string"
                }
              }
            }
          }
        },
        "outputs": {
          "description": "Outputs maps output name to condition of the output.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "description": "Conditions is a set of Condition instances.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "description": "Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. \n Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "status",
                "type"
              ],
              "properties": {
                "lastTransitionTime": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "format": "date-time"
                },
                "message": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "reason": {
                  "description": "ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "status": {
                  "type": "string"
                },
                "type": {
                  "description": "ConditionType is the type of the condition and is typically a CamelCased word or short phrase. \n Condition types should indicate state in the \"abnormal-true\" polarity. For example, if the condition indicates when a policy is invalid, the \"is valid\" case is probably the norm, so the condition should be called \"Invalid\".",
                  "type": "string"
                }
              }
            }
          }
        },
        "pipelines": {
          "description": "Pipelines maps pipeline name to condition of the pipeline.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "description": "Conditions is a set of Condition instances.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "description": "Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. \n Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "status",
                "type"
              ],
              "properties": {
                "lastTransitionTime": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "format": "date-time"
                },
                "message": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "reason": {
                  "description": "ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "status": {
                  "type": "string"
                },
                "type": {
                  "description": "ConditionType is the type of the condition and is typically a CamelCased word or short phrase. \n Condition types should indicate state in the \"abnormal-true\" polarity. For example, if the condition indicates when a policy is invalid, the \"is valid\" case is probably the norm, so the condition should be called \"Invalid\".",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "logging.openshift.io",
      "kind": "ClusterLogForwarder",
      "version": "v1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}