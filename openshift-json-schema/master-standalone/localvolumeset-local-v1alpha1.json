{
  "description": "LocalVolumeSet enables automatic provisioning of local PersistentVolumes based on specified criteria.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "local.storage.openshift.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "LocalVolumeSet"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "LocalVolumeSetSpec defines the desired state of LocalVolumeSet",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "storageClassName"
      ],
      "properties": {
        "deviceInclusionSpec": {
          "description": "DeviceInclusionSpec is the filtration rule for including a device in the device discovery",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "deviceMechanicalProperties": {
              "description": "DeviceMechanicalProperty denotes whether Rotational or NonRotational disks should be used. by default, it selects both",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "DeviceMechanicalProperty holds the device's mechanical spec. It can be rotational or nonRotational",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "deviceTypes": {
              "description": "Devices is the list of devices that should be used for automatic detection. This would be one of the types supported by the local-storage operator. Currently, the supported types are: disk, part. If the list is empty no devices will be selected.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "DeviceType is the types that will be supported by the LSO.",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "disk",
                  "part",
                  "loop",
                  "mpath"
                ]
              }
            },
            "maxSize": {
              "description": "MaxSize is the maximum size of the device which needs to be included",
              "type": [
                "string",
                "null"
              ]
            },
            "minSize": {
              "description": "MinSize is the minimum size of the device which needs to be included. Defaults to `1Gi` if empty.",
              "type": [
                "string",
                "null"
              ]
            },
            "models": {
              "description": "Models is a list of device models. If not empty, the device's model as outputted by lsblk needs to contain at least one of these strings.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "vendors": {
              "description": "Vendors is a list of device vendors. If not empty, the device's model as outputted by lsblk needs to contain at least one of these strings.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "fsType": {
          "description": "FSType type to create when volumeMode is Filesystem",
          "type": [
            "string",
            "null"
          ]
        },
        "maxDeviceCount": {
          "description": "Maximum number of Devices that needs to be detected per node. If omitted, there will be no maximum.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "nodeSelector": {
          "description": "Nodes on which the automatic detection policies must run.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "nodeSelectorTerms"
          ],
          "properties": {
            "nodeSelectorTerms": {
              "description": "Required. A list of node selector terms. The terms are ORed.",
              "type": "array",
              "items": {
                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "The label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                          "type": "string"
                        },
                        "values": {
                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "matchFields": {
                    "description": "A list of node selector requirements by node's fields.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "The label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                          "type": "string"
                        },
                        "values": {
                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "storageClassName": {
          "description": "StorageClassName to use for set of matched devices",
          "type": "string"
        },
        "tolerations": {
          "description": "If specified, a list of tolerations to pass to the discovery daemons.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "effect": {
                "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "key": {
                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "operator": {
                "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "tolerationSeconds": {
                "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              },
              "value": {
                "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "volumeMode": {
          "description": "VolumeMode determines whether the PV created is Block or Filesystem. It will default to Filesystem",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "Block",
            "Filesystem"
          ]
        }
      }
    },
    "status": {
      "description": "LocalVolumeSetStatus defines the observed state of LocalVolumeSet",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions is a list of conditions and their status.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "OperatorCondition is just the standard condition fields.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "lastTransitionTime": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "message": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "reason": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "type": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "observedGeneration": {
          "description": "observedGeneration is the last generation change the operator has dealt with",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "totalProvisionedDeviceCount": {
          "description": "TotalProvisionedDeviceCount is the count of the total devices over which the PVs has been provisioned",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "local.storage.openshift.io",
      "kind": "LocalVolumeSet",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}