{
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "broker.amq.io/v2alpha3"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "ActiveMQArtemis"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    },
    "spec": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "acceptors": {
          "description": "Configuration of all acceptors",
          "type": [
            "array",
            "null"
          ],
          "minItems": 0,
          "items": {
            "description": "A single acceptor configuration",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "amqpMinLargeMessageSize": {
                "description": "The default value is 102400 (100KBytes). Setting it to -1 will disable large message support.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "anycastPrefix": {
                "description": "To indicate which kind of routing type to use.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "connectionsAllowed": {
                "description": "Limits the number of connections which the acceptor will allow. When this limit is reached a DEBUG level message is issued to the log, and the connection is refused.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "enabledCipherSuites": {
                "description": "Comma separated list of cipher suites used for SSL communication.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "enabledProtocols": {
                "description": "Comma separated list of protocols used for SSL communication.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "expose": {
                "description": "Whether or not to expose this acceptor",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "multicastPrefix": {
                "description": "To indicate which kind of routing type to use.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "name": {
                "description": "The name of the acceptor",
                "type": [
                  "string",
                  "null"
                ]
              },
              "needClientAuth": {
                "description": "Tells a client connecting to this acceptor that 2-way SSL is required. This property takes precedence over wantClientAuth.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "port": {
                "description": "Port number",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "protocols": {
                "description": "The protocols to enable for this acceptor",
                "type": [
                  "string",
                  "null"
                ]
              },
              "sniHost": {
                "description": "A regular expression used to match the server_name extension on incoming SSL connections. If the name doesn't match then the connection to the acceptor will be rejected.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "sslEnabled": {
                "description": "Whether or not to enable SSL on this port",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "sslProvider": {
                "description": "Used to change the SSL Provider between JDK and OPENSSL. The default is JDK.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "sslSecret": {
                "description": "Name of the secret to use for ssl information",
                "type": [
                  "string",
                  "null"
                ]
              },
              "verifyHost": {
                "description": "The CN of the connecting client's SSL certificate will be compared to its hostname to verify they match. This is useful only for 2-way SSL.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "wantClientAuth": {
                "description": "Tells a client connecting to this acceptor that 2-way SSL is requested but not required. Overridden by needClientAuth.",
                "type": [
                  "boolean",
                  "null"
                ]
              }
            }
          }
        },
        "addressSettings": {
          "description": "a list of address settings",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "addressSetting": {
              "description": "address setting configuration",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "addressFullPolicy": {
                    "description": "what happens when an address where maxSizeBytes is specified becomes full",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "DROP",
                      "FAIL",
                      "PAGE",
                      "BLOCK"
                    ]
                  },
                  "autoCreateAddresses": {
                    "description": "whether or not to automatically create addresses when a client sends a message to or attempts to consume a message from a queue mapped to an address that doesnt exist",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoCreateDeadLetterResources": {
                    "description": "whether or not to automatically create the dead-letter-address and/or a corresponding queue on that address when a message found to be undeliverable",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoCreateExpiryResources": {
                    "description": "whether or not to automatically create the expiry-address and/or a corresponding queue on that address when a message is sent to a matching queue",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoCreateJmsQueues": {
                    "description": "DEPRECATED. whether or not to automatically create JMS queues when a producer sends or a consumer connects to a queue",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoCreateJmsTopics": {
                    "description": "DEPRECATED. whether or not to automatically create JMS topics when a producer sends or a consumer subscribes to a topic",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoCreateQueues": {
                    "description": "whether or not to automatically create a queue when a client sends a message to or attempts to consume a message from a queue",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoDeleteAddresses": {
                    "description": "whether or not to delete auto-created addresses when it no longer has any queues",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoDeleteAddressesDelay": {
                    "description": "how long to wait (in milliseconds) before deleting auto-created addresses after they no longer have any queues",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "autoDeleteCreatedQueues": {
                    "description": "whether or not to delete created queues when the queue has 0 consumers and 0 messages",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoDeleteJmsQueues": {
                    "description": "DEPRECATED. whether or not to delete auto-created JMS queues when the queue has 0 consumers and 0 messages",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoDeleteJmsTopics": {
                    "description": "DEPRECATED. whether or not to delete auto-created JMS topics when the last subscription is closed",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoDeleteQueues": {
                    "description": "whether or not to delete auto-created queues when the queue has 0 consumers and 0 messages",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "autoDeleteQueuesDelay": {
                    "description": "how long to wait (in milliseconds) before deleting auto-created queues after the queue has 0 consumers.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "autoDeleteQueuesMessageCount": {
                    "description": "the message count the queue must be at or below before it can be evaluated  to be auto deleted, 0 waits until empty queue (default) and -1 disables this check.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "configDeleteAddresses": {
                    "description": "What to do when an address is no longer in broker.xml. OFF = will do nothing addresses will remain, FORCE = delete address and its queues even if messages remaining.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "OFF",
                      "FORCE"
                    ]
                  },
                  "configDeleteQueues": {
                    "description": "What to do when a queue is no longer in broker.xml. OFF = will do nothing queues will remain, FORCE = delete queues even if messages remaining.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "OFF",
                      "FORCE"
                    ]
                  },
                  "deadLetterAddress": {
                    "description": "the address to send dead messages to",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "deadLetterQueuePrefix": {
                    "description": "the prefix to use for auto-created dead letter queues",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "deadLetterQueueSuffix": {
                    "description": "the suffix to use for auto-created dead letter queues",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "defaultAddressRoutingType": {
                    "description": "the routing-type used on auto-created addresses",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "ANYCAST",
                      "MULTICAST"
                    ]
                  },
                  "defaultConsumerWindowSize": {
                    "description": "the default window size for a consumer",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "defaultConsumersBeforeDispatch": {
                    "description": "the default number of consumers needed before dispatch can start for queues under the address.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "defaultDelayBeforeDispatch": {
                    "description": "the default delay (in milliseconds) to wait before dispatching if number of consumers before dispatch is not met for queues under the address.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "defaultExclusiveQueue": {
                    "description": "whether to treat the queues under the address as exclusive queues by default",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "defaultGroupBuckets": {
                    "description": "number of buckets to use for grouping, -1 (default) is unlimited and uses the raw group, 0 disables message groups.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "defaultGroupFirstKey": {
                    "description": "key used to mark a message is first in a group for a consumer",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "defaultGroupRebalance": {
                    "description": "whether to rebalance groups when a consumer is added",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "defaultGroupRebalancePauseDispatch": {
                    "description": "whether to pause dispatch when rebalancing groups",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "defaultLastValueKey": {
                    "description": "the property to use as the key for a last value queue by default",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "defaultLastValueQueue": {
                    "description": "whether to treat the queues under the address as a last value queues by default",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "defaultMaxConsumers": {
                    "description": "the maximum number of consumers allowed on this queue at any one time",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "defaultNonDestructive": {
                    "description": "whether the queue should be non-destructive by default",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "defaultPurgeOnNoConsumers": {
                    "description": "purge the contents of the queue once there are no consumers",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "defaultQueueRoutingType": {
                    "description": "the routing-type used on auto-created queues",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "ANYCAST",
                      "MULTICAST"
                    ]
                  },
                  "defaultRingSize": {
                    "description": "the default ring-size value for any matching queue which doesnt have ring-size explicitly defined",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "enableMetrics": {
                    "description": "whether or not to enable metrics for metrics plugins on the matching address",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "expiryAddress": {
                    "description": "the address to send expired messages to",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "expiryDelay": {
                    "description": "Overrides the expiration time for messages using the default value for expiration time. \"-1\" disables this setting.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "expiryQueuePrefix": {
                    "description": "the prefix to use for auto-created expiry queues",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "expiryQueueSuffix": {
                    "description": "the suffix to use for auto-created expiry queues",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "lastValueQueue": {
                    "description": "This is deprecated please use default-last-value-queue instead.",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "managementBrowsePageSize": {
                    "description": "how many message a management resource can browse",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "match": {
                    "description": "pattern for matching settings against addresses; can use wildards",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "maxDeliveryAttempts": {
                    "description": "how many times to attempt to deliver a message before sending to dead letter address",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "maxExpiryDelay": {
                    "description": "Overrides the expiration time for messages using a higher value. \"-1\" disables this setting.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "maxRedeliveryDelay": {
                    "description": "Maximum value for the redelivery-delay",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "maxSizeBytes": {
                    "description": "the maximum size in bytes for an address. -1 means no limits. This is used in PAGING, BLOCK and FAIL policies. Supports byte notation like K, Mb, GB, etc.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "maxSizeBytesRejectThreshold": {
                    "description": "used with the address full BLOCK policy, the maximum size in bytes an address can reach before messages start getting rejected. Works in combination with max-size-bytes for AMQP protocol only. Default = -1 (no limit).",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "messageCounterHistoryDayLimit": {
                    "description": "how many days to keep message counter history for this address",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "minExpiryDelay": {
                    "description": "Overrides the expiration time for messages using a lower value. \"-1\" disables this setting.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "pageMaxCacheSize": {
                    "description": "Number of paging files to cache in memory to avoid IO during paging navigation",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "pageSizeBytes": {
                    "description": "The page size in bytes to use for an address. Supports byte notation like K, Mb, GB, etc.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "redeliveryCollisionAvoidanceFactor": {
                    "description": "factor by which to modify the redelivery delay slightly to avoid collisions",
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "redeliveryDelay": {
                    "description": "the time (in ms) to wait before redelivering a cancelled message.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "redeliveryDelayMultiplier": {
                    "description": "multiplier to apply to the redelivery-delay",
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "redistributionDelay": {
                    "description": "how long (in ms) to wait after the last consumer is closed on a queue before redistributing messages.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "retroactiveMessageCount": {
                    "description": "the number of messages to preserve for future queues created on the matching address",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "sendToDlaOnNoRoute": {
                    "description": "if there are no queues matching this address, whether to forward message to DLA (if it exists for this address)",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "slowConsumerCheckPeriod": {
                    "description": "How often to check for slow consumers on a particular queue. Measured in seconds.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "slowConsumerPolicy": {
                    "description": "what happens when a slow consumer is identified",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "KILL",
                      "NOTIFY"
                    ]
                  },
                  "slowConsumerThreshold": {
                    "description": "The minimum rate of message consumption allowed before a consumer is considered \"slow.\" Measured in messages-per-second.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  }
                }
              }
            },
            "applyRule": {
              "description": "a flag APPLY_RULE that indicates on what parts of address settings in broker.xml to perform the merge. It has 3 possible values: =replace_all The merge performs merge on the address-settings as a whole part. =merge_replace The merge performs merge on each address-setting element =merge_all The merge performs merge on each property of every address-setting This is the default value",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "adminPassword": {
          "description": "Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.",
          "type": [
            "string",
            "null"
          ]
        },
        "adminUser": {
          "description": "User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.",
          "type": [
            "string",
            "null"
          ]
        },
        "connectors": {
          "description": "Configuration of all connectors",
          "type": [
            "array",
            "null"
          ],
          "minItems": 0,
          "items": {
            "description": "A single connector configuration",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "enabledCipherSuites": {
                "description": "Comma separated list of cipher suites used for SSL communication.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "enabledProtocols": {
                "description": "Comma separated list of protocols used for SSL communication.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "expose": {
                "description": "Whether or not to expose this connector",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "host": {
                "description": "Hostname or IP to connect to",
                "type": [
                  "string",
                  "null"
                ]
              },
              "name": {
                "description": "The name of the acceptor",
                "type": [
                  "string",
                  "null"
                ]
              },
              "needClientAuth": {
                "description": "Tells a client connecting to this acceptor that 2-way SSL is required. This property takes precedence over wantClientAuth.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "port": {
                "description": "Port number",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "sniHost": {
                "description": "A regular expression used to match the server_name extension on incoming SSL connections. If the name doesn't match then the connection to the acceptor will be rejected.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "sslEnabled": {
                "description": "Whether or not to enable SSL on this port",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "sslProvider": {
                "description": "Used to change the SSL Provider between JDK and OPENSSL. The default is JDK.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "sslSecret": {
                "description": "Name of the secret to use for ssl information",
                "type": [
                  "string",
                  "null"
                ]
              },
              "type": {
                "description": "The type either tcp or vm",
                "type": [
                  "string",
                  "null"
                ]
              },
              "verifyHost": {
                "description": "The CN of the connecting client's SSL certificate will be compared to its hostname to verify they match. This is useful only for 2-way SSL.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "wantClientAuth": {
                "description": "Tells a client connecting to this acceptor that 2-way SSL is requested but not required. Overridden by needClientAuth.",
                "type": [
                  "boolean",
                  "null"
                ]
              }
            }
          }
        },
        "console": {
          "description": "Configuration for the embedded web console",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "expose": {
              "description": "Whether or not to expose this port",
              "type": [
                "boolean",
                "null"
              ]
            },
            "sslEnabled": {
              "description": "Whether or not to enable SSL on this port",
              "type": [
                "boolean",
                "null"
              ]
            },
            "sslSecret": {
              "description": "Name of the secret to use for ssl information",
              "type": [
                "string",
                "null"
              ]
            },
            "useClientAuth": {
              "description": "If the embedded server requires client authentication",
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        },
        "deploymentPlan": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "image": {
              "description": "The image used for the broker deployment",
              "type": [
                "string",
                "null"
              ]
            },
            "journalType": {
              "description": "If aio use ASYNCIO, if nio use NIO for journal IO",
              "type": [
                "string",
                "null"
              ]
            },
            "messageMigration": {
              "description": "If true migrate messages on scaledown",
              "type": [
                "boolean",
                "null"
              ]
            },
            "persistenceEnabled": {
              "description": "If true use persistent volume via persistent volume claim for journal storage",
              "type": [
                "boolean",
                "null"
              ]
            },
            "requireLogin": {
              "description": "If true require user password login credentials for broker protocol ports",
              "type": [
                "boolean",
                "null"
              ]
            },
            "resources": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "limits": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "cpu": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "memory": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                },
                "requests": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "cpu": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "memory": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                }
              }
            },
            "size": {
              "description": "The number of broker pods to deploy",
              "type": [
                "integer",
                "null"
              ],
              "maximum": 16,
              "minimum": 0
            },
            "storage": {
              "description": "the storage capacity",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "size": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          }
        },
        "upgrades": {
          "description": "Specify the level of upgrade that should be allowed when an older product version is detected",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "enabled": {
              "description": "Set true to enable automatic micro version product upgrades, it is disabled by default.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "minor": {
              "description": "Set true to enable automatic minor product version upgrades, it is disabled by default. Requires spec.upgrades.enabled to be true.",
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        },
        "version": {
          "description": "The version of the application deployment.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "status": {
      "type": [
        "object",
        "null"
      ],
      "required": [
        "podStatus"
      ],
      "properties": {
        "podStatus": {
          "type": "object",
          "properties": {
            "ready": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "starting": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "stopped": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "broker.amq.io",
      "kind": "ActiveMQArtemis",
      "version": "v2alpha3"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}